# app.py
# =======================================================================================
# 목적: 관내출장여비 · 초과근무수당(2탭) 자동화
#
# [관내출장여비 로직]
#  1) 업로드용 백데이터 준비
#     - 사용자가 ‘인사랑’에서 추출한 원본(.xlsx)과 (서식) 출장자 백데이터(.xlsx) 준비
#
#  2) 파일 업로드
#     - 여비 원본 파일과 출장자 백데이터 파일 업로드 
#
#  3) 데이터 가공 · 요약
#     - 가) 여비 원본을 병합 해제, 여분 행·열 제거, 빈 이름 행 삭제 → "백데이터" 시트 생성
#     - 나) "백데이터"를 DataFrame으로 변환 → 규칙 적용(4시간 구분, 1시간 미만, 지급단가 결정) → "가공" 시트 저장, "요약" 시트 헤더 생성
#           - 4시간이상 & 차량 미사용 = 2만원
#           - 4시간이상 & 차량 사용   = 1만원
#           - 4시간미만 & 차량 미사용 = 1만원
#           - 4시간미만 & 차량 미사용 =   0원
#     - 다) "가공"시트 데이터를 활용해서, 요약 표 재구성 
#           - UI에서 연·월·부서 선택, 특정 출장자/단가별 날짜를 ‘제외’ 또는 ‘포함’ 규칙으로 누적
#           - 규칙을 반영한 월별 요약표(성명, 지급단가, 출장일수, 여비합계, 출장현황) 생성
#
#  4) 지급 조서 생성 · 다운로드
#     - (서식) 출장자 백데이터와 요약표를 결합해 혼합 DF 생성(각 인원에 대해 20,000원/10,000원 블록 보장)
#     - 혼합 DF를 ‘혼합’ 시트에 5행 헤더로 출력
#     - 서식 후처리:
#         · 헤더 = [연번, 직급, 성명, 은행명, 계좌번호, 출장현황(가변), 출장일수, 지급단가, 소계, 합계]
#         · A2: "{부서} 관내 출장여비 지급내역({연도}년 {월}월)" 입력 후 '합계' 열까지 병합, 글자크기 20
#         · 데이터 정렬 기준은 백데이터 파일에 입력된 [직급, 성명, 은행명, 계좌번호] 데이터를 가져온 후, [출장현황, 출장일자, 지급단가, 소계] 를 매칭하여 입력 
#         · ‘출장현황*’ 헤더 병합 ex) 출장현황1, 2, 3 등을 하나의 셀로 병
#         · ‘소계’ 오른쪽에 ‘합계’ 열 삽입 후 합계 계산
#         · 헤더 행(5행) 배경 연한 파랑
#         · 금액 열(지급단가, 소계, 합계) 오른쪽 정렬, 기타 가운데 정렬
#         · 동일 인적사항 블록 병합 및 합계·연번 세로 병합 
#         · 20,000/10,000 단가 강제 존재(없으면 더미 행 추가) 
#         · '합계' 헤더 윗칸(4행)에 "(단위 : 원)" 표기 및 우측 정렬
#         · 마지막 데이터행 아래 총합계 행(B열 '합계', 합계열 SUM, 연한 파랑 배경) 
#         · 총합계 바로 아래 1행은 무테(테두리 없음) 
#         · 마지막 데이터행 기준 3칸 아래부터 3행(무테, 합계열까지 병합) 
#         · 상기와 같이 내역을 확인함 
#         · yyyy. m. (출장월+1, 12월이면 익년 1월) 
#         · 확인자 : {부서명} 행정○급 ○○○ (인) 
#         · 표 너비·높이 자동(열 너비 계산, 행 높이는 자동)
#
#  화면 구성
#     - ① 업로드 안내 및 템플릿 다운로드
#     - ② 파일 업로드(원본, (서식) 출장자 백데이터)
#     - ③ 가공 실행 및 요약 편집(규칙 누적/초기화)
#     - ④ 지급 조서 다운로드(파일명: {부서} 관내출장여비_지급조서(YYYY년 MM월).xlsx)
# =======================================================================================

# app.py
# =======================================================================================
# 목적: 관내출장여비 · 초과근무수당(2탭) 자동화
# 변경사항(요청 반영):
# - 지급조서(혼합 시트): '출장일수' COUNTA(F열~마지막 출장현황) 수식 계산
# - 지급조서(혼합 시트): 출장현황 열 값 가운데 정렬
# - 지급조서(혼합 시트): 지급단가 열 #,##0 서식 + 우측 정렬
# - 초과근무수당: 비고에 강제조정 내역 포함(월57h/분기90h 캡 사유)
# - 초과근무 저장: 누계 연파랑+Bold, 57값 빨강 폰트+연분홍 배경, 강제조정 월의 수당시간 빨강 Bold
# =======================================================================================

from __future__ import annotations

import os
import re
from io import BytesIO
from datetime import datetime, timedelta

import pandas as pd
import streamlit as st
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Border, Side, Font, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.worksheet import Worksheet

# ----------------------------------
# 상수
# ----------------------------------
APP_TITLE = "관내출장여비 · 초과근무수당"
MANUAL_FILE = "인사랑 관내출장 내역 추출.pdf"
FORM_TEMPLATE_FILE = "(서식) 출장자 백데이터.xlsx"

TARGET_HEADERS = ["순번", "출장자", "도착일자", "총출장시간", "차량",
                  "4시간구분", "1시간미만", "지급단가", "여비금액"]
REQUIRED_SRC = ["순번", "출장자", "도착일자", "총출장시간", "차량"]

FILL_HEADER = PatternFill(fill_type="solid", start_color="DDEBF7", end_color="DDEBF7")  # 연한 파랑
THIN_SIDE = Side(style="thin", color="000000")
BORDER_THIN = Border(top=THIN_SIDE, bottom=THIN_SIDE, left=THIN_SIDE, right=THIN_SIDE)
PINK = PatternFill(fill_type="solid", start_color="FFC0CB", end_color="FFC0CB")          # 연한 분홍

FORM_TEMPLATE_FILE_OVT = "(서식) 초과근무자 백데이터.xlsx"
OVT_MONTH_CAP = 57.0
OVT_QTR_CAP = 90.0

# ----------------------------------
# 시간대(KST)
# ----------------------------------
try:
    from zoneinfo import ZoneInfo
    KST = ZoneInfo("Asia/Seoul")
except ImportError:
    from pytz import timezone
    KST = timezone("Asia/Seoul")

def kst_timestamp() -> str:
    return datetime.now(KST).strftime("%y%m%d_%H%M")

# ----------------------------------
# 규칙/판정 보조 상수·함수(출장)
# ----------------------------------
_HOURS_GE4 = set(map(str, range(4, 24))))
_HOURS_LT4 = {"1", "2", "3"}

def _extract_hour_token(s: str) -> str | None:
    m = re.search(r"(\d+)\s*시간", s)
    return m
